apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def isLocal() {
    return hasProperty('local') ? Boolean.parseBoolean(getProperty('local')) : true;
}

def getReleaseRepositoryUrl() {
  if (isLocal()) {
    return hasProperty('RELEASE_REPOSITORY_LOCAL') ? RELEASE_REPOSITORY_LOCAL : "file://${System.env.HOME}/.m2/repository"
  } else {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
  }
}

def getSnapshotRepositoryUrl() {
  if (isLocal()) {
    return hasProperty('SNAPSHOT_REPOSITORY_LOCAL') ? SNAPSHOT_REPOSITORY_LOCAL : "file://${System.env.HOME}/.m2/repository"
  } else {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://oss.sonatype.org/content/repositories/snapshots/"
  }
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_USERNAME') ? SONATYPE_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_PASSWORD') ? SONATYPE_PASSWORD : ""
}

afterEvaluate { project ->
  uploadArchives {
    //noinspection GradleMisplacedStatement
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = 'com.evernote'
        pom.artifactId = 'kgb'
        pom.version = VERSION_NAME

        repository(url: getReleaseRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }
        snapshotRepository(url: getSnapshotRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          name 'KeyboardGeometryBuilder'
          packaging 'aar'
          description 'Android Espresso soft keyboard test framework.'
          url 'https://github.com/evernote/kgb'
          inceptionYear '2015'

          scm {
            url 'https://github.com/evernote/kgb'
            connection 'scm:git:git://github.com/evernote/kgb.git'
            developerConnection 'scm:git:git@github.com:evernote/kgb.git'
          }

          developers {
            developer {
              name 'Pierre-Luc Paour'
              email 'github@paour.com'
              url 'https://github.com/paour'
              roles {
                role 'developer'
              }
            }
          }

          licenses {
            license {
              name 'Apache License version 2.0'
              url 'https://github.com/evernote/kgb/blob/master/LICENSE'
              distribution 'repo'
            }
          }

          issueManagement {
            system 'GitHub Issues'
            url 'https://github.com/evernote/kgb/issues'
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  task androidJavadocs2(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
  }

  task androidJavadocsJar2(type: Jar, dependsOn: androidJavadocs2) {
    classifier = 'javadoc'
    from androidJavadocs2.destinationDir
  }

  task androidSourcesJar2(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
  }

  artifacts {
    archives androidSourcesJar2
    archives androidJavadocsJar2
  }
}